'use strict'

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development'
process.env.NODE_ENV = 'development'

process.on('unhandledRejection', err => {
  throw err
})

const configDirectory = './configs/' + process.env.PROJECT

// Ensure environment variables are read.
require(configDirectory + '/env')

const fs = require('fs-extra')
const path = require('path')
const chalk = require('chalk')
const webpack = require('webpack')
const WebpackDevServer = require('webpack-dev-server')
const YAML = require('yamljs')

const clearConsole = require('react-dev-utils/clearConsole')
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles')
const {
  choosePort,
  createCompiler,
  prepareProxy,
  prepareUrls
} = require('react-dev-utils/WebpackDevServerUtils')
const openBrowser = require('react-dev-utils/openBrowser')

const config = require(configDirectory + '/development')
const paths = require(configDirectory + '/paths')

const createDevServerConfig = require('./common/server')

const manifest = YAML.load(paths.appManifest)

const useYarn = fs.existsSync(paths.yarnLockFile)
const isInteractive = process.stdout.isTTY

const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000
const HOST = process.env.HOST || '0.0.0.0'

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appKey])) {
  console.log(chalk.yellow('\nYou`re missing an API key.'))
  console.log(chalk.green('Get one from https://getpocket.com/developer/\n'))
  process.exit(1)
}

// Empty the build directory
fs.emptyDirSync(paths.appBuild)

// Copy public files to build folder
fs.copySync(paths.appPublic, paths.appBuild, { dereference: true })

// Generate the manifest for a chrome extension
// TODO: Add --patch,minor-major args
fs.writeFileSync(
  path.join(paths.appBuild, 'manifest.json'),
  JSON.stringify(manifest, null, 4)
)

fs.copySync(paths.appLocales, paths.appLocalesDest, {
  dereference: true,
  filter: file =>
    !(file.includes('strings.json') || file.includes('locales.js'))
})

// We attempt to use the default port but if it is busy, we offer the user to
// run on a different port. `detect()` Promise resolves to the next free port.
choosePort(HOST, DEFAULT_PORT)
  .then(port => {
    if (port == null) return

    // Add HMR to entr
    const excludeHMR = ['logout', 'login']
    for (var entryName in config.entry) {
      if (excludeHMR.indexOf(entryName) === -1) {
        config.entry[entryName] = [
          require.resolve('./common/server.hot')
        ].concat(config.entry[entryName])
      }
    }

    const protocol = process.env.HTTPS === 'true' ? 'https' : 'http'
    const appName = require(paths.appPackageJson).name
    const urls = prepareUrls(protocol, HOST, port)

    // Create a webpack compiler that is configured with custom messages.
    const compiler = createCompiler(webpack, config, appName, urls, useYarn)

    // Load proxy config
    const proxySetting = require(paths.appPackageJson).proxy
    const proxyConfig = prepareProxy(proxySetting, paths.appPublic)

    // Serve webpack assets generated by the compiler over a web sever.
    const serverConfig = createDevServerConfig(
      proxyConfig,
      urls.lanUrlForConfig,
      paths,
      config
    )
    const devServer = new WebpackDevServer(compiler, serverConfig)

    // Launch WebpackDevServer.
    devServer.listen(port, HOST, err => {
      if (err) return console.log(err)
      // if (isInteractive) clearConsole();

      console.log(chalk.cyan('Starting the development server...\n'))
      // openBrowser(urls.localUrlForBrowser);
    })
    ;['SIGINT', 'SIGTERM'].forEach(function(sig) {
      process.on(sig, function() {
        devServer.close()
        process.exit()
      })
    })
  })
  .catch(err => {
    if (err && err.message) {
      console.log(err.message)
    }
    process.exit(1)
  })
